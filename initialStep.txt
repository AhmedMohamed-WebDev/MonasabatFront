# Event Booking Platform - Complete Project Specifications

## Project Overview
I'm building an **event booking mobile-first responsive website** for a client. The project consists of a Node.js backend (already completed) and an Angular 19 frontend using standalone components only.

## Backend Stack (Already Completed)
- **Node.js** with Express
- **MongoDB** with Mongoose
- **API Endpoints**: 
  - `GET /api/event-items/search` - Search events with params (city, area, category, date, people, subcategory, minPrice, maxPrice)
  - `GET /api/events/:id` - Get single event details
- **EventItem Model Schema**:
```javascript
{
  _id: string,
  name: string,
  description: string,
  category: string, // e.g. "Hall", "Decoration", "Wedding", etc.
  subcategory?: string,
  price: number,
  location: {
    city: string,
    area: string,
    coordinates: { lat: number, lng: number }
  },
  images: string[], // Array of image URLs
  availableDates: Date[],
  supplier: {
    _id: string,
    name: string,
    phone: string
  },
  minCapacity: number,
  maxCapacity: number
}
```

## Frontend Stack & Architecture
- **Angular 19** with standalone components ONLY
- **Bootstrap** for responsive design
- **Angular Router** with lazy loading
- **HttpClient** for API calls
- **FormsModule** for form handling
- **No complex Angular features** - keep it simple

### Angular 19 File Structure:
```
src/
├── app/
│   ├── core/
│   │   ├── services/ (singleton services, guards, interceptors)
│   │   └── models/ (TypeScript interfaces matching backend)
│   ├── shared/ (reusable components, directives, pipes)
│   ├── features/ (each feature has its own folder)
│   │   ├── home/
│   │   ├── search-result/
│   │   └── service-detail/
│   ├── layout/ (header, footer, sidebar components)
│   └── environments/
└── public/ (replaces assets folder in Angular 19)
```

## Design System & Theme
### Color Palette (Earth-tone):
- **60% White**: `#ffffff` (primary-white)
- **30% Dark Gray**: `#2c2c2c` (primary-dark)  
- **10% Gold**: `#ffc107` (accent-gold)
- **Supporting Colors**:
  - Light Gray: `#f8f9fa`
  - Text Muted: `#6c757d`
  - Border Color: `#e9ecef`

### Design Principles:
- **Mobile-first responsive design**
- **Clean, modern UI** with smooth animations
- **Card-based layouts** with subtle shadows
- **Consistent spacing** and typography
- **Bootstrap utility classes** for styling
- **Hover effects** and micro-interactions

## Pages Completed

### 1. Home Page (`/`)
**Components**: `home.component.ts`, `home.component.html`, `home.component.css`

**Features**:
- Hero section with full-width search panel
- Search fields: City dropdown, Event type dropdown, People ranges, Date picker
- "Search Services" button navigates to `/search` with query params
- Services overview section with icons
- CTA section: "Are you a vendor? Join us"
- Header with logo and language switcher
- Footer with contact info

**Search Form Data**:
- Cities: Amman, Irbid, Zarqa, Aqaba, Salt, Madaba, Karak, Tafilah
- Event Types: Wedding, Engagement, Funeral, Conference, Birthday, Corporate Event, Graduation, Anniversary
- People Ranges: 50-100, 100-150, 150-200, 200-300, 300-500, 500+

### 2. Search Results Page (`/search`)
**Components**: `search-result.component.ts`, `search-result.component.html`, `search-result.component.css`
**Service**: `search-result.service.ts`

**Features**:
- **Left Sidebar Filters**:
  - Dynamic category filters based on event type
  - Price range filter (min/max inputs)
  - Location and availability filters
  - Clear all filters button
- **Main Results Grid**:
  - Service cards with images, details, ratings
  - "View Details" button navigates to `/service/:id`
  - Responsive grid layout
  - Sort options and results count
- **Category Mappings**:
  - Wedding: Flowers, Chairs, Tables, Decoration, Photography, Catering, Music
  - Funeral: Tents, Food, Sound, Chairs, Transportation
  - Conference: Sound, Chairs, Tables, Catering, Photography

## Current Services & Models

### SearchService (`core/services/search-result.service.ts`):
```typescript
searchEvents(params: any): Observable<any> {
  return this.http.get(`${this.baseUrl}/event-items/search`, { params });
}
```

### EventItem Model (`core/models/event-item.model.ts`):
```typescript
export interface EventItem {
  _id: string;
  name: string;
  description: string;
  category: string;
  subcategory?: string;
  price: number;
  minCapacity: number;
  maxCapacity: number;
  location: {
    city: string;
    area: string;
  };
  availableDates: Date[];
  supplier: {
    _id: string;
    name: string;
    phone: string;
  };
  images: string[];
}
```

## Routing Configuration (`app.routes.ts`):
```typescript
export const routes: Routes = [
  {
    path: '',
    loadComponent: () => import('./features/home/home.component').then((c) => c.HomeComponent),
  },
  {
    path: 'search',
    loadComponent: () => import('./features/search-result/search-result.component').then((m) => m.SearchResultComponent),
  },
  // Add service details route next
];
```

## Development Guidelines
1. **Use only Angular 19 features** - no older version syntax
2. **Standalone components only** - no modules
3. **Keep code simple** - avoid complex Angular patterns
4. **Use Input/Output with EventEmitter** for component communication
5. **Use HttpClient** for API calls
6. **Use RouterLink and router navigation** for routing
7. **Follow the exact backend API structure**
8. **Maintain consistent earth-tone design**
9. **Ensure mobile-first responsive design**
10. **Use Bootstrap classes for styling**

## Next Page to Build
**Service Details Page** (`/service/:id`) - Show full EventItem details with image gallery, booking functionality, and related services sidebar.

---

This is a comprehensive specification of my event booking platform project. Use this as reference for any future development without needing re-explanation.