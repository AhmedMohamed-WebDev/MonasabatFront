# Event Booking Platform - Complete Project Specifications

## Project Overview
I'm building an **event booking mobile-first responsive website** for a client. The project consists of a Node.js backend (already completed) and an Angular 19 frontend using standalone components only.

## Backend Stack (Already Completed)
- **Node.js** with Express
- **MongoDB** with Mongoose
- **API Endpoints**: 
  - `GET /api/event-items/search` - Search events with params (city, area, category, date, people, subcategory, minPrice, maxPrice)
  - `GET /api/events/:id` - Get single event details
- **EventItem Model Schema**:
```javascript
{
  _id: string,
  name: string,
  description: string,
  category: string, // e.g. "Hall", "Decoration", "Wedding", etc.
  subcategory?: string,
  price: number,
  location: {
    city: string,
    area: string,
    coordinates: { lat: number, lng: number }
  },
  images: string[], // Array of image URLs
  availableDates: Date[],
  supplier: {
    _id: string,
    name: string,
    phone: string
  },
  minCapacity: number,
  maxCapacity: number
}
```

## Frontend Stack & Architecture
- **Angular 19** with standalone components ONLY
- **Bootstrap** for responsive design
- **Angular Router** with lazy loading
- **HttpClient** for API calls
- **FormsModule** for form handling
- **No complex Angular features** - keep it simple

### Angular 19 File Structure:
```
src/
├── app/
│   ├── core/
│   │   ├── services/ (singleton services, guards, interceptors)
│   │   └── models/ (TypeScript interfaces matching backend)
│   ├── shared/ (reusable components, directives, pipes)
│   ├── features/ (each feature has its own folder)
│   │   ├── home/
│   │   ├── search-result/
│   │   └── service-detail/
│   ├── layout/ (header, footer, sidebar components)
│   └── environments/
└── public/ (replaces assets folder in Angular 19)
```

## Design System & Theme
### Color Palette (Earth-tone):
- **60% White**: `#ffffff` (primary-white)
- **30% Dark Gray**: `#2c2c2c` (primary-dark)  
- **10% Gold**: `#ffc107` (accent-gold)
- **Supporting Colors**:
  - Light Gray: `#f8f9fa`
  - Text Muted: `#6c757d`
  - Border Color: `#e9ecef`

### Design Principles:
- **Mobile-first responsive design**
- **Clean, modern UI** with smooth animations
- **Card-based layouts** with subtle shadows
- **Consistent spacing** and typography
- **Bootstrap utility classes** for styling
- **Hover effects** and micro-interactions

## Pages Completed

### 1. Home Page (`/`)
**Components**: `home.component.ts`, `home.component.html`, `home.component.css`

**Features**:
- Hero section with full-width search panel
- Search fields: City dropdown, Event type dropdown, People ranges, Date picker
- "Search Services" button navigates to `/search` with query params
- Services overview section with icons
- CTA section: "Are you a vendor? Join us"
- Header with logo and language switcher
- Footer with contact info

**Search Form Data**:
- Cities: Amman, Irbid, Zarqa, Aqaba, Salt, Madaba, Karak, Tafilah
- Event Types: Wedding, Engagement, Funeral, Conference, Birthday, Corporate Event, Graduation, Anniversary
- People Ranges: 50-100, 100-150, 150-200, 200-300, 300-500, 500+

### 2. Search Results Page (`/search`)
**Components**: `search-result.component.ts`, `search-result.component.html`, `search-result.component.css`
**Service**: `search-result.service.ts`

**Features**:
- **Left Sidebar Filters**:
  - Dynamic category filters based on event type
  - Price range filter (min/max inputs)
  - Location and availability filters
  - Clear all filters button
- **Main Results Grid**:
  - Service cards with images, details, ratings
  - "View Details" button navigates to `/service/:id`
  - Responsive grid layout
  - Sort options and results count
- **Category Mappings**:
  - Wedding: Flowers, Chairs, Tables, Decoration, Photography, Catering, Music
  - Funeral: Tents, Food, Sound, Chairs, Transportation
  - Conference: Sound, Chairs, Tables, Catering, Photography
###3.3. ✅ Service Details Page (`/service/:id`)
✅ Page 4: Booking Form Page (`/booking/:id`)
- Users try to book a service
- If not logged in → redirected to `/login`
- Booking is blocked until user is verified

## Page to build : OTP Login / Register
Design a simple phone-based login page for users. No email or password.

Form:
- Phone number field
- Button: “Send OTP via WhatsApp”
- Input for OTP
- Button: “Confirm”

🎯 On confirm:
- Send request to `/api/auth/send-otp` and `/api/auth/verify-otp`
- Save JWT token and redirect to where user came from (or dashboard)

📌 If user is a supplier, redirect to supplier dashboard


## 🎯 What This Page Does:
- Users enter their phone number
- App sends them OTP (mock)
- Users enter OTP → verify → receive JWT token
- On success → redirect back to `/booking/:id` with state

## Current Services & Models in the backend (NodeJS)

const User = require("../models/User");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

exports.register = async (req, res) => {
  try {
    const { name, phone, password, role } = req.body;
    const existingUser = await User.findOne({ phone });
    if (existingUser)
      return res.status(400).json({ message: "User already exists" });

    const hashed = await bcrypt.hash(password, 10);
    const user = await User.create({ name, phone, password: hashed, role });

    res.status(201).json({ message: "User registered" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.login = async (req, res) => {
  try {
    const { phone, password } = req.body;
    const user = await User.findOne({ phone });
    if (!user) return res.status(404).json({ message: "User not found" });

    const match = await bcrypt.compare(password, user.password);
    if (!match) return res.status(401).json({ message: "Invalid credentials" });

    const token = jwt.sign(
      { id: user._id, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: "1d" }
    );

    res.json({
      token,
      user: { id: user._id, name: user.name, role: user.role },
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};


### Backend Middleware (auth.js)
const jwt = require("jsonwebtoken");
const User = require("../models/User");

const authMiddleware = async (req, res, next) => {
  const token = req.header("Authorization")?.replace("Bearer ", "");

  if (!token) {
    return res
      .status(401)
      .json({ message: "Access denied. No token provided." });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = await User.findById(decoded.id);
    next();
  } catch (error) {
    res.status(400).json({ message: "Invalid token." });
  }
};

module.exports = authMiddleware;

### User Model (User.js)
const mongoose = require("mongoose");

const userSchema = new mongoose.Schema(
  {
    name: { type: String, required: true },
    phone: { type: String, required: true, unique: true },
    role: {
      type: String,
      enum: ["client", "supplier", "admin"],
      default: "client",
    },
    password: { type: String, required: true },
    isLocked: {
      type: Boolean,
      default: false,
    },
    bookingCount: {
      type: Number,
      default: 0,
    },
  },

  { timestamps: true }
);

module.exports = mongoose.model("User", userSchema);



## Routing Configuration (authRoutes.js)
const express = require("express");
const router = express.Router();
const { register, login } = require("../controllers/authController");
const { sendOtp, verifyOtp } = require("../controllers/otpController");

router.post("/send-otp", sendOtp);
router.post("/verify-otp", verifyOtp);

router.post("/register", register);
router.post("/login", login);

module.exports = router;
### using thes Utils 
---generateOTP.js
function generateOTP(length) {
    const digits = '0123456789';
    let otp = '';
    for (let i = 0; i < length; i++) {
        otp += digits[Math.floor(Math.random() * 10)];
    }
    return otp;
}

module.exports = generateOTP;
--and maybe WhatsApp.js
// utils/whatsapp.js

const sendWhatsAppNotification = async (phoneNumber, message) => {
  console.log(`📲 Sending WhatsApp message to ${phoneNumber}:`);
  console.log(`   "${message}"`);
  // 🔒 Real integration with Twilio/360Dialog would go here
};

module.exports = sendWhatsAppNotification;



## Development Guidelines
1. **Use only Angular 19 features** - no older version syntax
2. **Standalone components only** - no modules
3. **Keep code simple** - avoid complex Angular patterns
4. **Use Input/Output with EventEmitter** for component communication
5. **Use HttpClient** for API calls
6. **Use RouterLink and router navigation** for routing
7. **Follow the exact backend API structure**
8. **Maintain consistent earth-tone design**
9. **Ensure mobile-first responsive design**
10. **Use Bootstrap classes for styling**

## Next Page to Build
OTP Login / Register Design a simple phone-based login page for users. No email or password.


---

This is a comprehensive specification of my event booking platform project. Use this as reference for any future development without needing re-explanation.