# Event Booking Platform - Complete Project Specifications

## Project Overview
I'm building an **event booking mobile-first responsive website** for a client. The project consists of a Node.js backend (already completed) and an Angular 19 frontend using standalone components only.

## Backend Stack (Already Completed)
- **Node.js** with Express
- **MongoDB** with Mongoose
- **API Endpoints**: 
  - `GET /api/event-items/search` - Search events with params (city, area, category, date, people, subcategory, minPrice, maxPrice)
  - `GET /api/events/:id` - Get single event details
- **EventItem Model Schema**:
```javascript
{
  _id: string,
  name: string,
  description: string,
  category: string, // e.g. "Hall", "Decoration", "Wedding", etc.
  subcategory?: string,
  price: number,
  location: {
    city: string,
    area: string,
    coordinates: { lat: number, lng: number }
  },
  images: string[], // Array of image URLs
  availableDates: Date[],
  supplier: {
    _id: string,
    name: string,
    phone: string
  },
  minCapacity: number,
  maxCapacity: number
}
```

## Frontend Stack & Architecture
- **Angular 19** with standalone components ONLY
- **Bootstrap** for responsive design
- **Angular Router** with lazy loading
- **HttpClient** for API calls
- **FormsModule** for form handling
- **No complex Angular features** - keep it simple

### Angular 19 File Structure:
```
src/
├── app/
│   ├── core/
│   │   ├── services/ (singleton services, guards, interceptors)
│   │   └── models/ (TypeScript interfaces matching backend)
│   ├── shared/ (reusable components, directives, pipes)
│   ├── features/ (each feature has its own folder)
│   │   ├── home/
│   │   ├── search-result/
│   │   └── service-detail/
│   ├── layout/ (header, footer, sidebar components)
│   └── environments/
└── public/ (replaces assets folder in Angular 19)
```

## Design System & Theme
### Color Palette (Earth-tone):
- **60% White**: `#ffffff` (primary-white)
- **30% Dark Gray**: `#2c2c2c` (primary-dark)  
- **10% Gold**: `#ffc107` (accent-gold)
- **Supporting Colors**:
  - Light Gray: `#f8f9fa`
  - Text Muted: `#6c757d`
  - Border Color: `#e9ecef`

### Design Principles:
- **Mobile-first responsive design**
- **Clean, modern UI** with smooth animations
- **Card-based layouts** with subtle shadows
- **Consistent spacing** and typography
- **Bootstrap utility classes** for styling
- **Hover effects** and micro-interactions

## Pages Completed

### 1. Home Page (`/`)
**Components**: `home.component.ts`, `home.component.html`, `home.component.css`

**Features**:
- Hero section with full-width search panel
- Search fields: City dropdown, Event type dropdown, People ranges, Date picker
- "Search Services" button navigates to `/search` with query params
- Services overview section with icons
- CTA section: "Are you a vendor? Join us"
- Header with logo and language switcher
- Footer with contact info

**Search Form Data**:
- Cities: Amman, Irbid, Zarqa, Aqaba, Salt, Madaba, Karak, Tafilah
- Event Types: Wedding, Engagement, Funeral, Conference, Birthday, Corporate Event, Graduation, Anniversary
- People Ranges: 50-100, 100-150, 150-200, 200-300, 300-500, 500+

### 2. Search Results Page (`/search`)
**Components**: `search-result.component.ts`, `search-result.component.html`, `search-result.component.css`
**Service**: `search-result.service.ts`

**Features**:
- **Left Sidebar Filters**:
  - Dynamic category filters based on event type
  - Price range filter (min/max inputs)
  - Location and availability filters
  - Clear all filters button
- **Main Results Grid**:
  - Service cards with images, details, ratings
  - "View Details" button navigates to `/service/:id`
  - Responsive grid layout
  - Sort options and results count
- **Category Mappings**:
  - Wedding: Flowers, Chairs, Tables, Decoration, Photography, Catering, Music
  - Funeral: Tents, Food, Sound, Chairs, Transportation
  - Conference: Sound, Chairs, Tables, Catering, Photography
###3.3. ✅ Service Details Page (`/service/:id`)

## Page to build : 4.Booking Form Page
Design a booking form page where logged-in clients can submit a booking request for a selected service.

Form fields:
- Selected service summary
- Event date (choose from availableDates only)
- Number of people (within min/max range)
- Phone number (pre-filled if logged in)
- Name
- Button: “Confirm & Pay 10%”

🧾 On submit:
- API: `/api/bookings` (POST)
- JWT token required
- Show success message and redirect to dashboard

📌 If user is not logged in, redirect to OTP login flow before returning here

## Current Services & Models in the backend (NodeJS)

exports.createBooking = async (req, res) => {
  try {
    const { eventItemId, eventDate, numberOfPeople } = req.body;
    const item = await EventItem.findById(eventItemId).populate("supplier");

    if (!item) return res.status(404).json({ message: "Event item not found" });

    const supplier = await User.findById(item.supplier._id);

    if (supplier.isLocked) {
      return res.status(403).json({
        message:
          "هذا المزود تجاوز الحد المجاني للحجوزات. يرجى الاشتراك لمواصلة استقبال الحجوزات.",
      });
    }

    const totalPrice = item.price;
    const paidAmount = totalPrice * 0.1;

    const booking = await Booking.create({
      eventItem: item._id,
      client: req.user.id,
      eventDate,
      numberOfPeople,
      totalPrice,
      paidAmount,
    });

    // 🔁 Enforce booking limit for specific categories
    if (shouldEnforceLimit(item.category)) {
      supplier.bookingCount += 1;

      // 🟡 Between 41–49 → Notify but don't lock
      if (supplier.bookingCount >= 41 && supplier.bookingCount < 50) {
        await sendWhatsAppNotification(
          supplier.phone,
          `تنبيه: اقتربت من الحد المجاني للحجوزات (${supplier.bookingCount} من 50).`
        );
      }

      // 🔴 Booking #50 → Notify & Lock
      if (supplier.bookingCount === 50) {
        await sendWhatsAppNotification(
          supplier.phone,
          `تنبيه أخير: وصلت إلى الحد المجاني للحجوزات (50). تم إيقاف الحساب مؤقتًا.`
        );
        supplier.isLocked = true;
      }

      await supplier.save();
    }

    res.status(201).json({
      message: "Booking created successfully",
      booking,
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Something went wrong" });
  }
};
exports.updateBookingStatus = async (req, res) => {
  try {
    const { bookingId } = req.params;
    const { status } = req.body;

    // ✅ Ensure status is one of your enum values
    if (!["confirmed", "cancelled"].includes(status)) {
      return res.status(400).json({ message: "Invalid status value" });
    }

    const booking = await Booking.findById(bookingId).populate("eventItem");

    if (!booking) return res.status(404).json({ message: "Booking not found" });

    // ✅ Allow only the supplier who owns the event item to update the status
    if (booking.eventItem.supplier.toString() !== req.user.id) {
      return res.status(403).json({ message: "You are not authorized" });
    }

    booking.status = status;
    await booking.save();

    res.json({
      message: `Booking ${
        status === "confirmed" ? "confirmed" : "cancelled"
      } successfully`,
      booking,
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Failed to update booking status" });
  }
};
exports.cancelBooking = async (req, res) => {
  try {
    const booking = await Booking.findOne({
      _id: req.params.id,
      client: req.user.id,
    });

    if (!booking) return res.status(404).json({ message: "Booking not found" });

    if (booking.status !== "pending") {
      return res
        .status(400)
        .json({ message: "Only pending bookings can be cancelled" });
    }

    booking.status = "cancelled";
    await booking.save();

    res.json({ message: "Booking cancelled successfully" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Cancel failed" });
  }
};

### EventItem Model (Booking.js)
const mongoose = require("mongoose");

const bookingSchema = new mongoose.Schema({
  eventItem: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "EventItem",
    required: true,
  },
  client: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  eventDate: { type: Date, required: true },
  numberOfPeople: Number,
  status: {
    type: String,
    enum: ["pending", "confirmed", "cancelled"],
    default: "pending",
  },
  totalPrice: Number,
  paidAmount: Number,
  createdAt: { type: Date, default: Date.now },
});

module.exports = mongoose.model("Booking", bookingSchema);


## Routing Configuration (bookingRoutes.js)
const express = require("express");
const router = express.Router();
const {
  createBooking,
  getBookingsByUser,
  getBookingsForSupplier,
  getAllBookings,
  updateBookingStatus,
  getMyBookings,
  cancelBooking,
} = require("../controllers/bookingController");
const authMiddleware = require("../middleware/auth");

router.post("/", authMiddleware, createBooking);
router.get("/my-bookings", authMiddleware, getBookingsByUser);
router.get("/my", authMiddleware, getMyBookings);
router.patch("/:id/cancel", authMiddleware, cancelBooking);
router.get("/supplier-bookings", authMiddleware, getBookingsForSupplier);
router.get("/all", authMiddleware, getAllBookings); // (Optional: Admin only)
router.put("/:bookingId/status", authMiddleware, updateBookingStatus);

module.exports = router;


## Development Guidelines
1. **Use only Angular 19 features** - no older version syntax
2. **Standalone components only** - no modules
3. **Keep code simple** - avoid complex Angular patterns
4. **Use Input/Output with EventEmitter** for component communication
5. **Use HttpClient** for API calls
6. **Use RouterLink and router navigation** for routing
7. **Follow the exact backend API structure**
8. **Maintain consistent earth-tone design**
9. **Ensure mobile-first responsive design**
10. **Use Bootstrap classes for styling**

## Next Page to Build
OTP Login / Register Design a simple phone-based login page for users. No email or password.


---

This is a comprehensive specification of my event booking platform project. Use this as reference for any future development without needing re-explanation.